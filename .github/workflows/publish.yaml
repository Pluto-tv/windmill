
name: Publish
on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ECR }}
          aws-region: us-east-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repo
        run: |
          createEcr() {
            aws ecr describe-repositories --repository-names $1 || \
              aws ecr create-repository \
                --repository-name $1 \
                --tags Key=src_repo,Value=${{ github.repository }} \
                        Key=responsible,Value=devops \
                --image-scanning-configuration scanOnPush=true
      
            aws ecr set-repository-policy \
              --repository-name $1 \
              --policy-text file://deploy/ecr-repo-policy.json
          }
          createEcr "service-pro-workflow"

      - name: Build, tag, and push image
        env:
          ECR_REPOSITORY: service-pro-workflow
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          COMMIT_SHA: ${{ github.sha }}
          GITHUB_REGISTRY_TOKEN: ${{ secrets.GH_PKG_REPO_TOKEN}}
        run: |
          env
          IMAGE_TAG=$(echo $GITHUB_REF | sed -e 's/refs\/heads\///g' | sed -e 's/refs\/tags\///g' | sed -e 's/\@pluto-tv\/windmill\@//g' | sed -e 's/\//-/g')-${COMMIT_SHA}
          DOCKER_BUILDKIT=1 docker build -f ./Dockerfile -t $ECR_REPOSITORY --progress=plain --build-arg GITHUB_REGISTRY_TOKEN=${GITHUB_REGISTRY_TOKEN} .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
